name: CI

on:
  pull_request:
    branches:
      - 'main'
    types:
      - opened
      - reopened
      - synchronize

#동시성 환경을 해결한다
concurrency:

  group: ${{ github.ref }} # 동일한 PR에 대한 식별자
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      write-all
    steps:
      - uses: actions/checkout@v4
      - name: JDK 21 를 준비한다.
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: gradlew 의 root 실행권한을 부여한다.
        run: chmod +x gradlew

      - name: Gradle 를 준비한다.
        uses: gradle/actions/setup-gradle@417ae3ccd767c252f5661f1ace9f835f9654f2b5 # v3.1.0

      - name: 테스트 애플리케이션yml을 생성한다
        run: |
          mkdir -p src/test/resources
          echo "${{ secrets.APPLICATION_TEST_YML }}" | base64 -d > src/main/resources/application.yml

      - name: 빌드한다.
        run: ./gradlew build --stacktrace
        env:
          SPRING_PROFILES_ACTIVE: test

      # Test 후 Report 생성
      - name: 테스트 결과를 게시한다.
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: always()
        with:
          junit_files: '**/build/test-results/test/TEST-*.xml'

      - name: 실패시 공지한다.
        if: failure()
        run: |
          echo failed!
