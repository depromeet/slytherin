name: CD

on:
  push:
    branches:
      - 'main'

#동시성 환경을 해결한다
concurrency:
  group: ${{ github.ref }} # 동일한 PR에 대한 식별자
  cancel-in-progress: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      write-all
    steps:
      - uses: actions/checkout@v4
      - name: JDK 21 를 준비한다.
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: gradlew 의 root 실행권한을 부여한다.
        run: chmod +x gradlew

      - name: Gradle 를 준비한다.
        uses: gradle/actions/setup-gradle@417ae3ccd767c252f5661f1ace9f835f9654f2b5 # v3.1.0

      - name: application.yml 를 구성한다
        run: |
          mkdir -p src/main/resources
          echo "${{ secrets.APPLICATION_YML }}" | base64 --decode > src/main/resources/application.yml
          cat src/main/resources/application.yml

      - name: 빌드한다(테스트는 제외한다)
        run: ./gradlew clean build -x test

      - name: docker login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Push Docker images
        run: |
          docker build -f infra/docker/Dockerfile -t ${{ secrets.DOCKER_REPO }} .
          docker push ${{ secrets.DOCKER_REPO }}

      - name: 서버를 실행한다
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: root
          password: ${{ secrets.PASSWORD }}
          key: ${{ secrets.KEY }}
          script: |
            echo "🚀 애플리케이션 실행 중..."
            cd ${{ secrets.PROJECT_PATH }}
            ./infra/script/deploy.sh 
